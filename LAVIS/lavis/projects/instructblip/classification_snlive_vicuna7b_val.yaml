 # Copyright (c) 2022, salesforce.com, inc.
 # All rights reserved.
 # SPDX-License-Identifier: BSD-3-Clause
 # For full license text, see the LICENSE file in the repo root or https://opensource.org/licenses/BSD-3-Clause

model:
  arch: blip2_vicuna_instruct
  model_type: vicuna7b
  load_pretrained: True
  prompt: ""

datasets:
  snli_ve_instruct:
    # data_dir: ${env.data_dir}/datasets
    data_type: images # [images|videos|features]

    vis_processor:
      train:
        name: "clip_image_train"
        image_size: 224
      eval:
        name: "clip_image_eval"
        image_size: 224

    text_processor:
          train:
            name: "blip_caption"
          eval:
            name: "blip_caption"
            # prompt: "given the image respond to "
            
    build_info:
      # Be careful not to append minus sign (-) before split to avoid itemizing
      annotations:
        train:
          url: 
            - /export/share/dongxuli/data/lavis/snli/ve_train.json
          storage: 
            - snli/annotations/ve_train.json
        val:
          url: 
            - /export/share/dongxuli/data/lavis/snli/ve_dev.json
          storage: 
            - snli/annotations/ve_dev.json
        test:
          url: 
            - /export/share/dongxuli/data/lavis/snli/ve_test.json
          storage: 
            - snli/annotations/ve_test.json
      images:
          # storage: flickr30k/images/flickr30k-images
          storage: /export/share/datasets/vision/flickr30k/flickr30k-images


run:
  task: multimodal_classification
  # optimizer
  lr_sched: "linear_warmup_cosine_lr"
  init_lr: 1e-5
  min_lr: 0
  warmup_lr: 1e-8
  warmup_steps: 1000
  weight_decay: 0.05
  max_epoch: 1
  batch_size_train: 16
  batch_size_eval: 1
  num_workers: 8
  accum_grad_iters: 1

  max_len: 30
  min_len: 1
  num_beams: 5
  inference_method: "generate"
  prompt: ""
  length_penalty: -1.

  seed: 42
  output_dir: "output/instructblip/snlive_classification_vicuna7b_val/"

  amp: True
  resume_ckpt_path: null

  evaluate: True
  # train_splits: ["train"]
  valid_splits: ["val"]


  device: "cuda"
  world_size: 1
  dist_url: "env://"
  distributed: True
  save_freq: -1 # save epoch every xxx epochs -1 only save last and best. 
  val_freq: 1
